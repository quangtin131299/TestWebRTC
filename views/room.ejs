<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        const ROOM_ID = "<%= roomId %>"
    </script>


    <script src="/socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>


    <style>
        #video-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, 300px);
            grid-auto-rows: 300px;
        }

        video {
            width: 100%;
            height: 100%;
            object-fit: cover;

        }
    </style>
</head>

<body>
    <div id="video-grid"></div>
</body>

<script>
    const socket = io();
    const videoGrid = document.getElementById('video-grid');
    var peer = new Peer(undefined, { host: 'peerjs-server.herokuapp.com', secure: true, port: 443 });
    var myvideo = document.createElement('video');
    const peers = {}
    myvideo.muted = true;

    navigator.mediaDevices.getUserMedia({
        video: true,
        audio: false
    }).then(stream => {
        addVideoStream(myvideo, stream)

        peer.on('call', call => {
            call.answer(stream)
            const video = document.createElement('video')

            call.on('stream', userVideoStream => {
                addVideoStream(video, userVideoStream)
            })
        })

        socket.on('user-connected', userId => {
            connectToNewUser(userId, stream)
        })
    })

    socket.on('user-disconnected', userId => {
        if (peers[userId]) {
            peers[userId].close()
        }

    })

    peer.on('open', id => {
        socket.emit('join-room', ROOM_ID, id)
    })

    socket.on("user-connected", userId => {
        console.log('User connected: ' + userId);
    })

    function connectToNewUser(userId, stream) {
        const call = peer.call(userId, stream);
        const video = document.createElement('video');

        call.on('stream', userVideoStream => {
            addVideoStream(video, userVideoStream)
        })
        call.on('close', () => {
            video.remove()
        })

        peers[userId] = call
    }

    function addVideoStream(video, stream) {
        video.srcObject = stream;
        video.addEventListener('loadedmetadata', () => {
            video.play();
        })

        videoGrid.append(video);
    }


</script>

</html>